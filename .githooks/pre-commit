#!/bin/bash

# Git pre-commit hook for lastplace.nvim
# Runs code quality checks before allowing commit

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${CYAN}üîç Running pre-commit checks...${NC}"

# Check if we're in the right directory
if [ ! -f "Makefile" ] || [ ! -d "lua/lastplace" ]; then
    echo -e "${RED}‚ùå Error: Not in lastplace.nvim root directory${NC}"
    exit 1
fi

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to get staged Lua files
get_staged_lua_files() {
    git diff --cached --name-only --diff-filter=ACM | grep '\.lua$' || true
}

# Function to run check with retry
run_check() {
    local check_name="$1"
    local command="$2"
    local can_autofix="$3"
    
    echo -e "${YELLOW}üìã Running $check_name...${NC}"
    
    if eval "$command"; then
        echo -e "${GREEN}‚úÖ $check_name passed${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $check_name failed${NC}"
        
        if [ "$can_autofix" = "true" ]; then
            echo -e "${YELLOW}üîß Attempting to auto-fix...${NC}"
            return 1
        else
            return 1
        fi
    fi
}

# Get staged Lua files
STAGED_LUA_FILES=$(get_staged_lua_files)

if [ -z "$STAGED_LUA_FILES" ]; then
    echo -e "${YELLOW}‚ÑπÔ∏è  No Lua files staged for commit${NC}"
    exit 0
fi

echo -e "${CYAN}üìÅ Checking staged Lua files:${NC}"
echo "$STAGED_LUA_FILES" | sed 's/^/  - /'

# Track if any checks failed
CHECKS_FAILED=0

# 1. Code Formatting Check
if command_exists stylua; then
    if ! run_check "Code Formatting" "echo '$STAGED_LUA_FILES' | xargs stylua --check" "true"; then
        echo -e "${YELLOW}üîß Auto-fixing formatting issues...${NC}"
        echo "$STAGED_LUA_FILES" | xargs stylua
        
        # Re-stage the formatted files
        echo "$STAGED_LUA_FILES" | xargs git add
        echo -e "${GREEN}‚úÖ Formatting fixed and files re-staged${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  stylua not found, skipping format check${NC}"
fi

# 2. Linting Check  
if command_exists luacheck; then
    if ! run_check "Linting" "echo '$STAGED_LUA_FILES' | xargs luacheck" "false"; then
        echo -e "${RED}üí° Fix linting issues before committing${NC}"
        echo -e "${YELLOW}   Run: make lint-fix${NC}"
        CHECKS_FAILED=1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  luacheck not found, skipping lint check${NC}"
fi

# Final result
echo ""
if [ $CHECKS_FAILED -eq 0 ]; then
    echo -e "${GREEN}üéâ All pre-commit checks passed!${NC}"
    echo -e "${CYAN}‚ú® Ready to commit${NC}"
    exit 0
else
    echo -e "${RED}üö´ Pre-commit checks failed${NC}"
    echo -e "${YELLOW}üí° Fix the issues above and try again${NC}"
    echo ""
    echo -e "${CYAN}Quick fixes:${NC}"
    echo -e "  make format     ${YELLOW}# Fix formatting${NC}"
    echo -e "  make lint-fix   ${YELLOW}# Fix some lint issues${NC}"
    echo -e "  make check      ${YELLOW}# Run all checks${NC}"
    exit 1
fi
